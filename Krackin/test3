import string
import numpy as np
import pandas as pd
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Download stopwords
nltk.download('stopwords')

# Read dataset
df = pd.read_csv('spam_ham_dataset.csv')

# Clean up the text data
df['text'] = df['text'].apply(lambda x: x.replace('\r\n', ''))

# Initialize PorterStemmer
stemmer = PorterStemmer()

# Prepare corpus and remove stopwords
corpus = []
stopwords_set = set(stopwords.words('english'))

for i in range(len(df)):
    text = df['text'].iloc[i].lower()  # Convert text to lowercase
    text = text.translate(str.maketrans('', '', string.punctuation)).split()  # Remove punctuation
    text = [stemmer.stem(word) for word in text if word not in stopwords_set]  # Stem and remove stopwords
    text = ' '.join(text)  # Join the list into a string with space separator
    corpus.append(text)

# Create a CountVectorizer and transform the corpus into feature vectors
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(corpus).toarray()
y = df['label_num']

# Split dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the RandomForestClassifier
clf = RandomForestClassifier(n_jobs=-1)
clf.fit(X_train, y_train)

# Classification of a new email
email_to_classify = input('Input email here: ')  # Or use: df['text'].values[10] for testing

# Process the input email text like the training data
email_text = email_to_classify.lower().translate(str.maketrans('', '', string.punctuation)).split()
email_text = [stemmer.stem(word) for word in email_text if word not in stopwords_set]
email_text = ' '.join(email_text)

# Convert the email text into the same feature format
email_corpus = [email_text]
x_email = vectorizer.transform(email_corpus)

# Predict if the email is spam or ham
prediction = clf.predict(x_email)

# Print prediction result
if prediction == 1:
    print("This email is spam.")
else:
    print("This email is ham (legitimate).")

# Optional: Check the actual label for df['text'].iloc[10] if testing
print(f"Actual label for the email: {df['label_num'].iloc[10]}")
